P = 5000
r =11.5
n = seq(1,15)
A = P*(1+r/100)^n
A
height=c(180,165,169,193)
weight=c(87,58,65,100)
weight/((height/100)^2)
height=c(180,165,169,193)
weight=c(87,58,65,100)
weight/((height/100)^2)
tall =(height*3.28)>6
tall
height=c(180,165,169,193)
weight=c(87,58,65,100)
weight/((height/100)^2)
tall =(height/100*3.28)>6
tall
height=c(180,165,169,193)
weight=c(87,58,65,100)
weight/((height/100)^2)
tall =(height/100*3.28)>6
tall
weight[tall]
data(cars)
?cars
print(head(cars, 5))
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
state
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
cars
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
cars=cbind(cars,state)
cars
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
cars=cbind(cars,state)
cars
cars$ratio <- cars$dist/cars$speed
print(mean(cars$ratio))
print(sd(cars$ratio))
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
cars=cbind(cars,state)
cars
cars$ratio=ratio
data(cars)
?cars
print(head(cars, 5))
set.seed(0)
state=sample(c('NY','CA','CT'), size=50,replace=TRUE)
dim(cars)
state
cars$state=state
cars=cbind(cars,state)
cars
cars$ratio <- cars$dist/cars$speed
print(mean(cars$ratio))
print(sd(cars$ratio))
summary(cars)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
colSums(is.na(ts_data))
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
colSums(is.na(ts_data))
ts_data[colSums(is.na(ts_data))> 0,]
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
colSums(is.na(ts_data))
ts_data[colSums(is.na(ts_data))> 0,]
which(rowSums(is.na(ts_data)) !=0)
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
colSums(is.na(ts_data))
ts_data[colSums(is.na(ts_data))> 0,]
names(ts_data)[which(rowSums(is.na(ts_data)) !=0)]
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
str(ts_data)
class(ts_data)
dim(ts_data)
summary(ts_data)
sapply(ts_data,class)
sum(is.na(ts_data))
sum(-complete.cases(ts_data))
which(is.na(ts_data), arr.ind=TRUE)
colSums(is.na(ts_data))
ts_data[colSums(is.na(ts_data))> 0,]
names(ts_data)[which(colSums(is.na(ts_data)) !=0)]
if((!dir.exists('data')){
if((!dir.exists('data'))
dir.create('data')
if(!dir.exists('data')
dir.create('data')
if(!dir.exists('data')){
dir.create('data')
)}
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Building.Address=='Upper Bway', ]
UpperBway
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Location=='Upper Bway', ]
UpperBway
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Location=='Upper Bway', ]
UpperBway
library(tidyverse)
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Location=='Upper Bway', ]
UpperBway
write.csv(UpperBway, 'data/UpperBway.csv')
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Location=='Upper Bway', ]
UpperBway
write.csv(UpperBway, 'data/UpperBway.csv')
ts_data[ts_data$SF > mean(ts_data$SF), ]
write.csv(ts_data[ts_data$SF > mean(ts_data$SF), ], 'data/SF.csv')
if(!dir.exists('data')){
dir.create('data')
}
dir.exists('data')
UpperBway=ts_data[ts_data$Location=='Upper Bway', ]
UpperBway
write.csv(UpperBway, 'data/UpperBway.csv')
ts_data[ts_data$SF > mean(ts_data$SF), ]
write.csv(ts_data[ts_data$SF > mean(ts_data$SF), ], 'data/SF.csv')
TopTendf=ts_data[order(ts_data$SF, decreasing=TRUE), c(1,2,4)]
TopTendf=head(TopTendf,10)
write.csv(TopTendf, file='./data/TopTen.csv',row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
restaurants = read.table("https://s3.amazonaws.com/nycdsabt01/NYC_Restaurants.txt")
head(restaurants)
restaurants = read.table("https://s3.amazonaws.com/nycdsabt01/NYC_Restaurants.txt")
restaurants
plot(restaurants[, 2:5])
plot(restaurants[, 2:5], col=restaurants$Location)
plot(restaurants[, 2:5], col=as.frestaurants$Location)
plot(restaurants[, 2:5], col=as.factor(restaurants$Location))
# Fit the multiple linear regression model
model <- lm(Price ~ Food + Decor + Service + Location, data = restaurants)
# Summarize the model
summary(model)
plot(model)
influencePlot(model)
library(car)
influencePlot(model)
vif(model)
avPlots(model)
model.service=lm(Price~ Service, data=restaurants)
summary(model.service)
model1 <- lm(Price ~ Food + Decor, data = restaurants)
summary(model1)
model1 <- lm(Price ~ Food + Decor, data = restaurants)
summary(model1)
model2 <- lm(Price ~ Food + Decor + Location, data = restaurants)
summary(model1)
model1 <- lm(Price ~ Food + Decor, data = restaurants)
summary(model1)
plot(model1)
vif(model1)
avPlots(model1)
model2 <- lm(Price ~ Food + Decor + Location, data = restaurants)
summary(model2)
plot(model2)
vif(model2)
avPlots(model2)
AIC(model,model.service,model1,model2)
BIC(model,model.service,model1,model2)
AIC(model,model.service,model1,model2)
BIC(model,model.service,model1,model2)
summary(model)$adj.r.squared
summary(model.service)$adj.r.squared
summary(model1)$adj.r.squared
summary(model2)$adj.r.squared
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y~x)
sig=sig+m
}
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y~x)
df= data.frame(x=1:n, y =rnorm(n))
m=lm(y~x)
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y ~ x)
sig=sig+m
}
df= data.frame(x=1:n, y =rnorm(n))
m=lm(y ~ x, data=df)
sig=sig+m
df= data.frame(x=1:n, y =rnorm(n))
m=lm(y ~ x, data=df)
summary(m)
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y ~ x)
sig=sig+m
}
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y ~ x, df)
sig=sig+m
}
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y ~ x, df)
#sig=sig+m
}
summary(m)
iter=1000
n=1000
sig=0
for(i in 1:n){
df= data.frame(x=1:n, y=rnorm(n))
m=lm(y ~ x, df)
sig=sig+(summary(m)$coefficients['x',4] <= .05)
}
summary(m)
sig/iter
'''
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Q1
carloads <- read.csv("carloads.csv", stringsAsFactors = FALSE)
#Q1
carloads <- read.csv("carloads.csv", stringsAsFactors = FALSE)
#Q1
carloads <- read.csv("carloads.csv", stringsAsFactors = FALSE)
#Q1
carloads <- read.csv("carloads.csv", stringsAsFactors = FALSE)
ism <- read.csv("ism.csv", stringsAsFactors = FALSE)
#Q1
carloads <- read.csv("carloads.csv", stringsAsFactors = FALSE)
ism <- read.csv("ism.csv", stringsAsFactors = FALSE)
carloads
ism
carloads <- carloads %>%
filter(Measure == "Weekly Carloads By 22 Commodity Categories" & Sub.Variable == "Total")
library(dplyr)
carloads <- carloads %>%
filter(Measure == "Weekly Carloads By 22 Commodity Categories" & Sub.Variable == "Total")
library(dplyr)
carloads <- carloads %>%
filter(Measure == "Weekly Carloads By 22 Commodity Categories" & Sub.Variable == "Total")
carloads
carloads <- carloads %>%
pivot_longer(cols = starts_with("X"), names_to = "Week", values_to = "Carloads")
library(tidyr)
carloads <- carloads %>%
pivot_longer(cols = starts_with("X"), names_to = "Week", values_to = "Carloads")
carloads
carloads <- carloads %>%
select(Company, Commodity = Variable, Week, Carloads)
carloads
carloads <- carloads %>%
mutate(Week = gsub("X", "", Week),
Carloads = gsub(",", "", Carloads))
carloads
carloads$Carloads <- as.numeric(carloads$Carloads)
carloads
carloads$Week <- as.Date(carloads$Week, "%m.%d.%Y")
ism$Date <- as.Date(ism$Date, "%m/%d/%Y")
carloads
ism```
ism
carloads <- carloads %>%
mutate(Year = year(Week), Month = month(Week))
library(lubridate)
carloads <- carloads %>%
mutate(Year = year(Week), Month = month(Week))
ism <- ism %>%
mutate(Year = year(Date), Month = month(Date))
library(lubridate)
carloads <- carloads %>%
mutate(Year = year(Week), Month = month(Week))
ism <- ism %>%
mutate(Year = year(Date), Month = month(Date))
library(lubridate)
carloads <- carloads %>%
mutate(Year = year(Week), Month = month(Week))
ism <- ism %>%
mutate(Year = year(Date), Month = month(Date))
carloads
ism
monthly_carloads <- carloads %>%
group_by(Company, Commodity, Year, Month) %>%
summarize(MonthlyCarloads = sum(Carloads, na.rm = TRUE))
monthly_carloads <- carloads %>%
group_by(Company, Commodity, Year, Month) %>%
summarize(MonthlyCarloads = sum(Carloads, na.rm = TRUE))
df <- left_join(monthly_carloads, ism, by = c("Year", "Month"))
ggplot(df %>% filter(Commodity == "Containers"), aes(x = Company, y = MonthlyCarloads)) +
geom_boxplot() +
facet_wrap(~Year) +
theme_minimal()
library(ggplot2)
ggplot(df %>% filter(Commodity == "Containers"), aes(x = Company, y = MonthlyCarloads)) +
geom_boxplot() +
facet_wrap(~Year) +
theme_minimal()
cor_df <- df %>%
group_by(Company, Commodity) %>%
summarize(Correlation = cor(MonthlyCarloads, ISM.Index, use = "complete.obs")) %>%
arrange(desc(Correlation))
cor_df <- df %>%
group_by(Company, Commodity) %>%
summarize(Correlation = cor(MonthlyCarloads, Index, use = "complete.obs")) %>%
arrange(desc(Correlation))
cor_df
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = ISM.Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
library(ggplot2)
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = ISM.Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
library(ggplot2)
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = ism.Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = ism.Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
library(dplyr)
library(ggplot2)
library(dplyr)
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = ism.Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
colnames(df)
library(ggplot2)
library(dplyr)
ggplot(df %>% filter(Commodity == "Crushed Stone, Sand and Gravel"),
aes(x = Index, y = MonthlyCarloads, color = as.factor(Year))) +
geom_point() +
theme_minimal() +
labs(color = "Year")
colnames(df)
shiny::runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject')
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject')
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject')
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyAppProjectAttempt2')
setwd("~/")
setwd("C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject")
runApp()
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyAppProjectAttempt2')
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyAppProjectAttempt2')
setwd("C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject")
setwd("C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyProject")
runApp()
runApp('C:/Users/Chloe DeRouen/OneDrive/Desktop/R Shiny App Project/ShinyAppProjectAttempt2')
runApp()
runApp()
